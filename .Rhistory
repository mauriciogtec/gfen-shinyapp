data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
pal = colorNumeric(c("pink", "blur", "darkgreen"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
pal = colorNumeric(c("pink", "blue", "darkgreen"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
pal = colorNumeric(c("pink", "blue", "purple"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
pal = colorNumeric(c("lightpurple", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
pal = colorNumeric(c("purple", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
pal = colorNumeric(c("pink", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
pal = colorNumeric(c("lightblue", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
basemap = leaflet(options=list(attributionControl=FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-97.73923, 30.26013, zoom = 11)
pal = colorNumeric(c("lightblue", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(prod)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
labs <- HTML(paste0(
"id: ", taz@data$ID, "<br>",
"ntrips: ", taz@data$ntrips, "<br>"))
lower = min(taz@data$ntrips, na.rm=TRUE)
upper = max(taz@data$ntrips, na.rm=TRUE)
pal = colorQuantile(c("lightblue", "blue", "red"),
domain=c(lower, upper),
na.color="grey", n=8)
fill_formula = ~pal(ntrips)
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
pal = pal,
opacity=0.5,
values = c(lower, upper))
?addLegend
labelFormat()
labelf = function(x) labelFormat(as.integer(10^x))
labelf
labelf(0.1)
labelf = function(x) labelFormat()(as.integer(10^x))
labelf(0.1)
labelf = labelFormat(transform=function(x) as.integer(10^x))
labelf(0.1)
labelf = labelFormat(transform=function(x) 10^x)
labelf = labelFormat()
taz@data$ntrips_log10 = log10(taz@data$ntrips)
labs <- HTML(paste0(
"id: ", taz@data$ID, "<br>",
"ntrips: ", taz@data$ntrips, "<br>"))
lower = min(taz@data$ntrips_log10, na.rm=TRUE)
upper = max(taz@data$ntrips_log10, na.rm=TRUE)
pal = colorNumeric(c("lightblue", "blue", "red"),
domain=c(lower, upper),
na.color="grey")
fill_formula = ~pal(ntrips_log10)
labelf = labelFormat(transform=function(x) 10^x)
legtitle = "Mean Productivity"
basemap %>%
addPolygons(
data = taz,
label = labs,
weight = 0.2,
smoothFactor = 0.5,
fillOpacity = 0.5,
layerId = ~TAZ,
fillColor = fill_formula) %>%
addLegend(
position = "bottomleft",
title = legtitle,
labFormat = labelf,
pal = pal,
opacity=0.5,
values = c(lower, upper))
basemap = leaflet(options=list(attributionControl=FALSE)) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
setView(-97.73923, 30.26013, zoom = 11)
legtitle = "Total trips per TAZ"
labelf = labelFormat(transform=function(x) as.integer(10^x))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
splitlevels
dfmean = data.frame(
x=c(splitlevels[1], midpoints, splitlevels[length(splitlevels)]),
d=c(0, global_mean, 0))
dfmean = data.frame(
x=c(splitlevels[1], midpoints, splitlevels[length(splitlevels)]),
values=c(0, global_mean, 0))
dfmean
dfmean = data.frame(
x=c(splitlevels[1], midpoints, splitlevels[length(splitlevels)]),
value=c(0, global_mean, 0))
entries <- expand.grid(i = c(499, 500), t = c(1,2))
# ids <- map2_dbl(entries$i, entries$t, idx) # requires dbl instead of int.... why?
node <- paste(entries$i, entries$t, sep="-")
node
ids <- node2vertex[[node]]
ids
D = rbind(matrix(0, 1, length(ids)),
densities[ ,ids, drop=FALSE],
matrix(0, 1, length(ids)))
D
dims(D)
dim(D)
dens <- data.frame(D, row.names=NULL)
D <- data.frame(D, row.names=NULL)
names(D) <- paste0("node ", entries$i, " ", times_chr[entries$t])
D$x = dfmean$x
plotdata <- D %>%
gather(variable, value, -x)
plotdata
View(D)
# dens <- map(ids, ~ as.numeric(densities[ ,.])) %>%
D = rbind(matrix(0, 1, length(ids)),
densities[ ,ids, drop=FALSE],
matrix(0, 1, length(ids)))
D <- data.frame(D, row.names=NULL)
names(D) <- paste0("node ", entries$i, " ", times_chr[entries$t])
D
names(D)
names(D) <- paste0("node ", entries$i, " ", times_chr(entries$t))
D$x = dfmean$x
plotdata <- D %>%
gather(variable, value, -x)
plotdata
names(D) <- paste0("TAZ ", entries$i, " / ", times_chr(entries$t))
D = rbind(matrix(0, 1, length(ids)),
densities[ ,ids, drop=FALSE],
matrix(0, 1, length(ids)))
D <- data.frame(D, row.names=NULL)
names(D) <- paste0("TAZ ", entries$i, " / ", times_chr(entries$t))
D$x = dfmean$x
plotdata <- D %>%
gather(variable, value, -x)
plotdata
g <- ggplot(plotdata) +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(colour=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), colour="black", linetype="dash") +
ylim(0, 0.06) +
xlim(0, 100) +
labs(fill="", colour="")
g
plotdata
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value))
dfmean
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), color="black", linetype="dash")
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value))
dfmean
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value))
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), color="black")
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dash")
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed")
g <- ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed") +
# ylim(0, 0.06) +
xlim(0, 72) +
labs(fill="", colour="")
g
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed")
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed") +
# ylim(0, 0.06) +
xlim(0, 72)
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed")
ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed") +
# ylim(0, 0.06) +
xlim(0, 100.0)
splitlevels
g <- ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed") +
# ylim(0, 0.06) +
xlim(0, splitlevels[length(splitlevels) -1]) +
labs(fill="", colour="")
g
g <- ggplot() +
geom_area(data=plotdata, aes(fill=variable, x = x, y = value), position="identity", alpha=0.2) +
geom_line(data=plotdata, aes(color=variable, x = x, y = value)) +
geom_line(data=dfmean, aes(x=x, y=value), linetype="dashed") +
# ylim(0, 0.06) +
# xlim(0, 72) +
labs(fill="", colour="")
g
runApp()
runApp()
runApp()
pos <- which(data_of_click$node == input$tazs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dir = "data/probs/"
files = list.files(dir)
nbins = length(splitlevels) - 1
d = length(files)
idx = files %>%
map_chr(~str_split(.x, "_")[[1]][2]) %>%
map_chr(~str_sub(.x, end=-5)) %>%
as.integer()
probs_cols = vector("list", length=d)
for (i in seq_along(files)) {
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
prob_cols[[i]] = x
}
probs = reduce(prob_cols, cbind)
saveRDS(probs, "data/probs.RDS")
runApp()
runApp()
runApp()
runApp()
runApp()
dfmean = data.frame(
x=c(splitlevels[1], midpoints, splitlevels[length(splitlevels)]),
value=c(0, global_mean, 0))
rsconnect::setAccountInfo(name='mauriciogtec',
token='437E6826690FB77B53261E45551A1533',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mauriciogtec',
token='437E6826690FB77B53261E45551A1533',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mauriciogtec', token='437E6826690FB77B53261E45551A1533', secret='/OlCIw1MW1u76dDhXu6MQ1fGIqfW0GBhlUnCngDT')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='mauriciogtec', token='437E6826690FB77B53261E45551A1533', secret='/OlCIw1MW1u76dDhXu6MQ1fGIqfW0GBhlUnCngDT')
library(rsconnect)
?deployApp
appName = "gfen"
deployApp(appName=appName)
deployApp(account="mauriciogtec", appName=appName)
library("basefun")
library("sp")
shiny::runApp()
library("basefun")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
appName = "gfen"
deployApp(account="mauriciogtec", appName=appName)
library(rsconnect)
appName = "gfen"
deployApp(account="mauriciogtec", appName=appName)
library(rsconnect)
appName = "gfen"
deployApp(account="mauriciogtec", appName=appName)
# save to binary
# this auxiliary script can be useful to store data
# in binary format that can be more easily read by the app
# when uploaded
library("tidyverse")
library("raster")
library("sp")
# read probabilities
dir = "/data/output_mooth_probs/"
files = list.files(dir)
# read probabilities
dir = "/data/output_smooth_probs/"
files = list.files(dir)
# read probabilities
dir = "data/output_smooth_probs/"
files = list.files(dir)
nbins = length(splitlevels) - 1
d = length(files)
splitlevels = readRDS("./data/splitlevels.RDS")
taz = readRDS("./data/TAZs.RDS")
vertexdata = readRDS("./data/vertex_data.RDS")
splitlevels = readRDS("./data/splitlevels.RDS")
# read probabilities
dir = "data/output_smooth_probs/"
files = list.files(dir)
nbins = length(splitlevels) - 1
d = length(files)
idx = files %>%
map_chr(~str_split(.x, "_")[[1]][2]) %>%
map_chr(~str_sub(.x, end=-5)) %>%
as.integer()
probs_cols = vector("list", length=d)
for (i in seq_along(files)) {
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
prob_cols[[i]] = x
}
probs = reduce(prob_cols, cbind)
saveRDS(probs, "data/probs.RDS")
files = list.files(dir)
nbins = length(splitlevels) - 1
d = length(files)
idx = files %>%
map_chr(~str_split(.x, "_")[[1]][2]) %>%
map_chr(~str_sub(.x, end=-5)) %>%
as.integer()
probs_cols = vector("list", length=d)
for (i in seq_along(files)) {
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
prob_cols[[i]] = x
}
probs_cols = vector("list", length=d)
i = 1
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
probs_cols = vector("list", length=d)
for (i in seq_along(files)) {
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
probs_cols[[i]] = x
}
probs = reduce(prob_cols, cbind)
probs = reduce(probs_cols, cbind)
saveRDS(probs, "data/probs.RDS")
runApp()
# read probabilities
dir = "data/output_smooth_probs/"
files = list.files(dir)
nbins = length(splitlevels) - 1
d = length(files)
idx = files %>%
map_chr(~str_split(.x, "_")[[1]][2]) %>%
map_chr(~str_sub(.x, end=-5)) %>%
as.integer()
probs_cols = vector("list", length=d)
for (i in seq_along(files)) {
file = files[i]
pos = idx[i]
x = scan(paste0(dir, file), sep=",")
x = matrix(x, nrow=nbins, byrow=TRUE)
probs_cols[[i]] = x
}
probs = reduce(probs_cols, cbind)
saveRDS(probs, "data/probs.RDS")
runApp()
runApp()
runApp()
